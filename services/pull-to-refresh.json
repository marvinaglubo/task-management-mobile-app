{
  "type": "app-service",
  "name": "pull-to-refresh",
  "description": "",
  "singleton": true,
  "variables": [
    {
      "name": "register",
      "type": "method",
      "description": "",
      "body": "/** @type {HTMLElement} */\nconst element = document.querySelector(elementSelector)\n\nif (!element) return\n\nconst refreshScope = this.$rootScope.$new(true);\n\nlet touchstartY = 0;\nlet refreshPos = 0\nconst defaultPos = -50\nconst canRefreshPos = 25\nconst maxPos = 50\n\nconst $ctrl = { touchstartY, refreshPos }\nrefreshScope.$ctrl = $ctrl\n\nconst refreshContainer = this.$compile(`<div class=\"pull-to-refresh-container\">\n<div class=\"pull-to-refresh\">\n    <bln-badge core \n        style=\"--bln-badge-icon-size:30px;--bln-badge-default-color:transparent;--bln-badge-text-color:var(--primary-color, #000);--bln-badge-padding:0%;--bln-badge-margin:0%; width: 34px; display: flex; justify-content: center; align-items: center; padding-top: 4px; padding-top: 1.5px\" \n        icon=\"({\n            &quot;type&quot;: &quot;font-icon&quot;,\n            &quot;style&quot;: &quot;solid&quot;,\n            &quot;name&quot;: &quot;redo-alt&quot;,\n            &quot;position&quot;: &quot;icon-only&quot;\n        })\">\n    </bln-badge>\n    <bln-spinner core style=\"--bln-spinner-size:30px;--bln-spinner-thickness:8; --bln-spinner-color: var(--primary-color, #000)\"></bln-spinner>\n</div>\n</div>`)(refreshScope)[0]\n\n/** @type {HTMLElement} */\nconst refreshEl = refreshContainer.querySelector('.pull-to-refresh')\n/** @type {HTMLElement} */\nconst spinner = refreshContainer.querySelector('bln-spinner')\n/** @type {HTMLElement} */\nconst reload = refreshContainer.querySelector('bln-badge')\n\nif (!refreshEl || !spinner || !reload) return\n\n/** @param state {'default' | 'can-reload' | 'hidden'}  */\nconst setReloadIcon = (state) => {\n    switch (state) {\n        case 'can-reload':\n            reload.style.opacity = '1'\n            break;\n\n        case 'default':\n            reload.style.opacity = '.35'\n            break;\n\n        case 'hidden':\n            reload.style.opacity = '0'\n            break;\n    }\n}\n\nconst setSpinner = (isReloading) => {\n    if (isReloading) {\n        spinner.style.opacity = '1'\n    } else {\n        spinner.style.opacity = '0'\n    }\n}\n\nconst setPosition = (pos, deg) => {\n    if (!refreshEl) return\n    $ctrl.refreshPos = pos\n    refreshEl.style.transform = 'translateY(' + pos + 'px)'\n    reload.style.transform = 'rotate(' + deg + 'deg)'\n}\n\nconst resetToDefault = () => {\n    setPosition(defaultPos, 0)\n    setSpinner(false)\n    setReloadIcon('default')\n}\n\n// Initialize\nresetToDefault()\nelement.prepend(refreshContainer)\n\n// Add Listeners\nelement.addEventListener('touchstart', e => {\n    if (element.scrollTop > 0) return\n    $ctrl.touchstartY = e.touches[0].clientY;\n\n    const canRefresh = $ctrl.refreshPos > canRefreshPos\n    setReloadIcon(canRefresh ? 'can-reload' : 'default')\n    setSpinner(false)\n});\n\nelement.addEventListener('touchmove', e => {\n    if (element.scrollTop > 0) return\n    const touchY = e.touches[0].clientY;\n    const diff = touchY - $ctrl.touchstartY\n\n    let newPos = defaultPos + diff\n    if (newPos > maxPos) newPos = maxPos\n\n    setPosition(newPos, newPos * 2.4)\n\n    const canRefresh = $ctrl.refreshPos > canRefreshPos\n    setReloadIcon(canRefresh ? 'can-reload' : 'default')\n});\n\nelement.addEventListener('touchend', () => {\n    const canRefresh = $ctrl.refreshPos > canRefreshPos\n\n    if (canRefresh) {\n        setPosition(10, 0)\n        setSpinner(true)\n        setReloadIcon('hidden')        \n        \n        this.$timeout(async () => {\n            if (typeof onRefresh === 'function') await onRefresh()\n\n            resetToDefault()\n        }, 1000)\n        \n    } else {\n        resetToDefault()\n    }\n});",
      "invokeOnLoad": false,
      "isAsync": false,
      "returnType": {
        "name": "any"
      },
      "parameters": [
        "elementSelector",
        "onRefresh"
      ]
    },
    {
      "name": "$rootScope",
      "type": "service"
    },
    {
      "name": "$compile",
      "type": "service"
    },
    {
      "name": "$timeout",
      "type": "service"
    }
  ],
  "visible": [
    "register"
  ]
}